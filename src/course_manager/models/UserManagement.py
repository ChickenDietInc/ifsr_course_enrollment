from django.db import models
from django.contrib.auth.models import BaseUserManager, Group
from course_manager.models.Management import Management


class UserManagement(models.Model):
    """
        deprecated! \n
        \n
        This class covers no functionality at all and should be removed with the next update.\n
        Mind possible cross-dependencies when applying changes.
    """

    class Meta:
        app_label = 'course_manager'

    my_management = models.OneToOneField(Management, primary_key=True)

    def __str__(self):
        return "the User Management"


class UserAccountManager(BaseUserManager):
    """
    This class is required to create new user_account-objects via *.objects.create_user(...)\n
    The newly generated user_account-object is then initialized by its AccountManager-class\n
    to provide class specific setup options.
    """

    class Meta:
        app_label = 'course_manager'

    def create_user(self, name_of_user, s_number, username, email):
        """
        Creates and saves an Executive User with the given params.
        """
        if not username:
            raise ValueError('Users must have a username address')
        if not email:
            raise ValueError('Users must have an email address')

        user = self.model(
            username=username,
            email=self.normalize_email(email),
            name_of_user=name_of_user,
            s_number=s_number
        )
        user.set_password(None)
        user.save(using=self._db)
        return user


class ParticipantAccountManager(BaseUserManager):
    """
    This class is required to create new user_account-objects via *.objects.create_user(...)\n
    The newly generated user_account-object is then initialized by its AccountManager-class\n
    to provide class specific setup options.
    """

    class Meta:
        app_label = 'course_manager'

    def create_user(self, name_of_user, s_number, username, email):
        """
        Creates and saves a Participant User with the given params.
        """
        if not username:
            raise ValueError('Users must have a username')
        if not email:
            raise ValueError('Users must have an email address')

        user = self.model(
            username=username,
            email=self.normalize_email(email),
            name_of_user=name_of_user,
            s_number=s_number,

        )
        user.set_password(None)
        user.save(using=self._db)

        '''
        HACK: to prevent import issues, do not use 'Appointment' here!

        for app_ID in list_of_appointments:
            for app in Appointment.objects.all():
                if app.id == app_ID:
                    app.add_participant(user)
        '''
        return user

    def edit_participant(self, part_instance, name_of_user, s_number, username, email):
        """
        modifies and saves an Executive User with the given params.
        """
        if not part_instance:
            return
        if not username:
            raise ValueError('Users must have a username')
        if not email:
            raise ValueError('Users must have an email address')
        if not name_of_user:
            name_of_user = part_instance.name_of_user
        if not s_number:
            s_number = part_instance.s_number

        part_instance.username = username
        part_instance.email = self.normalize_email(email)
        part_instance.name_of_ser = name_of_user
        part_instance.s_umber = s_number

        part_instance.save(using=self._db)


class OrganizerAccountManager(BaseUserManager):

    class Meta:
        app_label = 'course_manager'

    def create_user(self, name_of_user, s_number, email, password=None):
        """
        Creates and saves an Executive User with the given params.\n
        \n
        The username is generated by simply removing all whitespaces from name_of_user\n
        We need this for our drop-down selection fields which display name_of_user
        """
        username = name_of_user.replace(" ", "")

        if not username:
            raise ValueError('Users must have a username')
        if not email:
            raise ValueError('Users must have an email address')
        user = self.model(
            username=username,
            email=self.normalize_email(email),
            name_of_user=name_of_user,
            s_number=s_number,
            the_management=Management.objects.all()[0],
            my_user_management=UserManagement.objects.all()[0],
        )
        user.set_password(password)
        user.save(using=self._db)

        organizers_group = Group.objects.get_by_natural_key("Organizers")
        user.groups.add(organizers_group)

        return user


class TutorAccountManager(BaseUserManager):

    class Meta:
        app_label = 'course_manager'

    def create_user(self, name_of_user, s_number, email, password=None):
        """
        Creates and saves a tutor with the given params.\n
        \n
        The username is generated by simply removing all whitespaces from name_of_user\n
        We need this for our drop-down selection fields which display name_of_user
        """
        username = name_of_user.replace(" ", "")
        print("TutorAccountManager, username="+username)

        if not username:
            raise ValueError('Users must have a username')
        if not email:
            raise ValueError('Users must have an email address')

        user = self.model(
            username=username,
            email=self.normalize_email(email),
            name_of_user=name_of_user,
            s_number=s_number,
            the_management=Management.objects.all()[0],

        )

        user.set_password(password)
        user.save(using=self._db)

        tutors_group = Group.objects.get_by_natural_key("Tutors")
        user.groups.add(tutors_group)

        return user

    def edit_tutor(self, tutor_instance, name_of_user, s_number, email, visible):
        """
        modifies and saves a tutor with the given params.\n

        The username is generated by simply removing all whitespaces from name_of_user\n
        We need this for our drop-down selection fields which display name_of_user\n
        """

        username = name_of_user.replace(" ", "")

        if not tutor_instance:
            return
        if not username:
            raise ValueError('Users must have a username')
        if not email:
            raise ValueError('Users must have an email address')
        if not name_of_user:
            name_of_user = tutor_instance.name_of_user
        if not s_number:
            s_number = tutor_instance.s_number

        tutor_instance.username = username
        tutor_instance.email = self.normalize_email(email)
        tutor_instance.name_of_user = name_of_user
        tutor_instance.s_number = s_number
        tutor_instance.is_visible = visible

        tutor_instance.save(using=self._db)